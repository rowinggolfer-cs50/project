At this point, we have a working virtual environment and our django project, 
and the ability to run a debug server using the following commands.

me@my-comp ~/project $ source venv/bin/activate
(venv) me@my-comp ~/project $ python manage.py runserver

but this project is, at this point, just a template for a website.

my plans for this website are twofold.
1. include a set of pages which describe what I did, step by step
2. create an application for myself and my dental colleagues managing patient 
   requests during the covid-19 crisis when we are taking phone calls only,
   and unable to access the proprietary dental notes systems running at each 
   other's practices.

So we will have (using django language) 2 "apps".

Before we start these apps, let's just take a look at what django has provided
out of the box.

(venv) me@my-comp ~/project $ tree cs50
cs50
├── cs50
│   ├── asgi.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-38.pyc
│   │   ├── settings.cpython-38.pyc
│   │   ├── urls.cpython-38.pyc
│   │   └── wsgi.cpython-38.pyc
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── db.sqlite3
└── manage.py

2 directories, 11 files

We can ignore the files in __pycache__.

Let's examine the rest.
Note: We have 2 folders called cs50. cs50 is simply the PROJECT_NAME I chose when 
running django-admin startproject PROJECT_NAME
having 2 such folders is good design, which will become clear one we start our
"apps", however it does lead to some unavoidable ambiguity in this tutorial.
I will differentiate by calling the, "root cs50" and "project cs50"


in the "root cs50"  folder, we have 2 files and a folder.
manage.py      
# used only by us, the developer to start a test server, manage
the database, or start a shell

a full list of commands you can issue with manage.py can be found by issuing the
command

(venv) me@my-comp ~/project $ python manage.py help

Type 'manage.py help <subcommand>' for help on a specific subcommand.

Available subcommands:

[auth]
    changepassword
    createsuperuser

[contenttypes]
    remove_stale_contenttypes

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    sendtestemail
    shell
    showmigrations
    sqlflush
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    test
    testserver

[sessions]
    clearsessions

[staticfiles]
    collectstatic
    findstatic
    runserver



db.sqlite3
Our sqlite3 database. For a small website, sqlite is good fit, as it makes for
very easy deployment. django can use a variety of industry standard databases
such as postgresql, mariadb and mysql, but that is beyond the scope of this
project. 

cs50/

in the "project cs50" folder, we have 
__init__.py
this file is blank

asgi.py and wsgi.py
These files are used for deploying to webservers. wsgi has been around for
years. asgi is a new emerging standard (with with I am unfamiliar).
We don't really need to touch these files, although it can be useful to put code
therein to confirm you are in a deployed environment and overwrite some
settings. But we are not at that stage yet, so we can leave them alone!

urls.py
out of the box, django has one url pattern in this file.
urlpatterns = [path('admin/', admin.site.urls),]     

if, with your development server running you visit
http://127.0.0.1:8000/admin/
you will see what this does.

I will come back to this in the Howto/04.txt


the final file therein is settings.py.

Whilst we could stick with the default version here (django choses sane
defaults), we will need to modify this file as we add apps, choose a different
database etc.

However - there are 2 security warnings in this file.

# SECURITY WARNING: keep the secret key used in production secret!                                 
SECRET_KEY = 'tm@j(u-=tv(hpxt-@_5nf(zxi!88*6t79ay2ksohvbip=4e2)d'                                  

your SECRET_KEY will be different to mine, but I have made 2 errors already.
1. I have shown you mine!
2. I have put settings.py under version control, so it is also recorded there!

the SECRET_KEY is used by django for cryptographic functions, such as session
cookies, password resets etc. You can also use it in combination with django's
built in functionality to encrypt data, files etc.
Therefore once in production, it could be problematic to change this.

If you are never going to share your code, don't worry about this. I would
suggest, however, that it is a good idea to create a separate folder named
"secrets" and keep this out of your version control etc.
(either add secrets/ to .gitignore, or put it somewhere else entirely)
As your website grows, you will almost certainly accrue extra "secrets", such as
api keys for paypal etc.... 

replace the code in settings.py with something like

# Use a separate file for the secret key
with open('/path/to/secrets/secret_key.txt') as f:
    SECRET_KEY = f.read().strip()

(to generate a new secret key use the following python code)

from django.core.management.utils import get_random_secret_key
get_random_secret_key()


Here's another warning.

# SECURITY WARNING: don't run with debug turned on in production!                                  
DEBUG = True   

Mark my words, YOU WILL FORGET TO CHANGE THIS!.

I have used are 2 ways around this.
1. in wsgi.py (and/or asgi.py) you could put the following code

from django.conf import settings
settings.DEBUG = False

(NOTE - this is the correct way to import your settings module from anywhere
within your project or app code.
Avoiding code like "from cs50 import settings" as this will make it more
difficult for you to reuse your "apps" in different projects.)


Another way would be to leave asgi.py and wsgi.py alone identify your
development environment with code like this in settings.py.

import socket
if socket.gethostname() == 'my-comp':
    DEBUG = True
else:
    FALSE

this could obviously be done as a one-liner.
DEBUG = socket.gethostname() == "my-comp"

I will apply these changes to my project and commit to git again.

git add .
git commit -m "security steps applied & Howto/03.txt written"

